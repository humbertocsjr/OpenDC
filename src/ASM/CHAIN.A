;
;  Released under the GNU GPL.  See http://www.gnu.org/licenses/gpl.txt
;
;  This program is part of the DeSmet C Compiler
;
;  DeSmet C is free software; you can redistribute it and/or modify it
;  under the terms of the GNU General Public License as published by the
;  Free Software Foundatation; either version 2 of the License, or any
;  later version.
;
;  DeSmet C is distributed in the hope that it will be useful, but WITHOUT
;  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
;  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
;  for more details.
;
;	CHAIN.A  --		Load and Go for IBM.

CR		EQU	13

;	IBM	codes

IBM		EQU	21H
OPEN_CODE	EQU	15
CLOSE_CODE	EQU	16
READ_CODE	EQU	20
SETDMA_CODE	EQU	26
OPEN2_CODE	EQU	3DH
CLOSE2_CODE	EQU	3EH
READ2_CODE	EQU	3FH

FDRIVE		EQU	0
FNAME		EQU	1
FEXT		EQU	9
FBLOCK		EQU	12
FRSIZE		EQU	14
FSIZE		EQU	16
FRECORD		EQU	32
FLOC		EQU	33

	DSEG
	PUBLIC	_PCB_,_MSDOS2_:BYTE
FAILMSG:DB	13,10,'GEN or ASM88 Missing',0

	CSEG
FCB	DB	0,'        EXE',0,0,0,0,0,0,0,0,0,0,0,0,0
	DB	0,0,0,0,0,0,0,0,0,0,0
MINMEM	DW	0
OLD_DS	DW	0
OLD_PCB	DW	0
HANDLE	DW	0

	PUBLIC	_CHAIN_,PUTS_,EXIT_
_CHAIN_:
	MOV	OLD_DS,DS		;REMEMBER IN CASE FAILURE
	POP	DX			;DO NOT NEED RETURN ADDRESS
	POP	SI			;COMMAND STRING
	CLD
	CMP	_MSDOS2_,1		;1 IF RUNNING ON MSDOS 2.0
	JNZ	LOAD1
	JMP	LOAD2
LOAD1:	CMP	BYTE [SI+1],':'		;DRIVE IN COMMAND NAME ?
	JNZ	NO_DRIVE
	LODSB				;DRIVE LETTER
	INC	SI			;SKIP THE COLON
	SUB	AL,'@'			;SET TO INDEX
	MOV	FCB,AL			;NOW IN FCB

NO_DRIVE:
	MOV	AX,CS			;STORE NAME INTO FCB
	MOV	ES,AX
	MOV	DI,OFFSET FCB+FNAME
NNAME:	LODSB				;NEXT CHAR OF COMMAND NAME
	CMP	AL,' '			;BLANK AT END OF NAME
	JZ	ENAME
	STOSB
	JMP	NNAME
ENAME:
;	COPY COMMAND TAIL TO PCB_

	MOV	AX,_PCB_			;PICK UP MAXIMUM MEMORY
	MOV	OLD_PCB,AX		;SAVE OLD PCB_ ADDRESS
	MOV	ES,AX			;RE USE OLD PCB_
	MOV	DI,129
XTAIL:	LODSB
	OR	AL,AL			;ZERO AT END OF STRING
	JZ	ETAIL
	STOSB
	JMP	XTAIL
ETAIL:	MOV	AL,CR			;PUT CR AT END OF TAIL
	STOSB

	MOV	AX,OFFSET HIWATER	;GET FIRST FREE PARAGRAPH AFTER CHAIN
	ADD	AX,15
	AND	AX,0FFF0H		;SET TO PARAGRAPH
	PUSH	AX			;SAVE FOR READ
	MOV	CL,4
	SHR	AX,CL
	MOV	CX,CS
	ADD	AX,CX			;LOW WATER
	MOV	MINMEM,AX


	MOV	AX,CS			;SET TINY CASE. DS=CS
	MOV	DS,AX

	MOV	AH,OPEN_CODE		;OPEN THE FILE
	MOV	DX,OFFSET FCB
	INT	IBM
	OR	AL,AL			;ZERO IF GOOD OPEN
	JNZ	CHAIN_FAIL

	MOV	WORD FCB+FBLOCK,0	;ZERO OUT RECORD
	MOV	BYTE FCB+FRECORD,0
	MOV	AX,WORD FCB+FSIZE	;FILE SIZE
	MOV	WORD FCB+FRSIZE,AX	;READ ENTIRE FILE AT ONCE

	POP	DX			;OFFSET OF HIGHWATER
	PUSH	DX
	MOV	AH,SETDMA_CODE
	INT	IBM			;SET DMA ADRRESS FOR HEADER RECORD
	MOV	DX,OFFSET FCB
	MOV	AH,READ_CODE
	INT	IBM			;READ IN THE HEADER RECORD
	OR	AL,AL			;0 IF READ IS OK
	JNZ	CHAIN_FAIL

;	CLOSE THE EXE FILE

	MOV	DX,OFFSET FCB
	MOV	AH,CLOSE_CODE
	INT	IBM
	MOV	CX,WORD FCB+FSIZE	;FILE SIZE
	JMP	SETUP_HEADER



;	DO THE LOAD FOR MSDOS 2.0

LOAD2:	MOV	DI,OFFSET FCB
	MOV	CX,0
LOADNEXT:
	PUSH	DS			;DATA SEGMENT OF C
	PUSH	SI			;START OF LOAD NAME
	PUSH	CX			;REMEMBER NEXT PATH= OFFSET
	MOV	AX,CS			;STORE NAME INTO FCB
	MOV	ES,AX

NNAME2:	LODSB				;NEXT CHAR OF COMMAND NAME
	CMP	AL,' '			;BLANK AT END OF NAME
	JZ	ENAME2
	STOSB
	JMP	NNAME2
ENAME2:	MOV	AL,'.'			;ADD .EXE TO NAME
	STOSB
	MOV	AL,'E'			;ADD .EXE TO NAME
	STOSB
	MOV	AL,'X'			;ADD .EXE TO NAME
	STOSB
	MOV	AL,'E'			;ADD .EXE TO NAME
	STOSB
	MOV	AL,0			;ZERO AT END OF NAME STRING
	STOSB

;	COPY COMMAND TAIL TO PCB_

	MOV	AX,_PCB_		;PICK UP MAXIMUM MEMORY
	MOV	OLD_PCB,AX		;SAVE OLD PCB_ ADDRESS
	MOV	ES,AX			;RE USE OLD PCB_
	MOV	DI,129
XTAIL2:	LODSB
	OR	AL,AL			;ZERO AT END OF STRING
	JZ	ETAIL2
	STOSB
	JMP	XTAIL2
ETAIL2:	MOV	AL,CR			;PUT CR AT END OF TAIL
	STOSB

	MOV	AX,CS			;SET TINY CASE. DS=CS
	MOV	DS,AX

	MOV	AH,OPEN2_CODE		;OPEN THE FILE
	MOV	AL,0			;INPUT MODE
	MOV	DX,OFFSET FCB
	INT	IBM
	POP	CX			;OFFSET INTO PATH=
	POP	SI			;NAME STARTS HERE
	POP	DS			;C DATA
	JNC	OPEN_OK

;	PLUCK THE NEXT PREFIX OUT OF THE ENVIRONMENT VARIABLES

	MOV	ES,OLD_PCB		;ENV POINTER AT 2C IN PCB
	MOV	ES,ES:[2CH]		;ENVIRONMENT SEGMENT
	MOV	DI,CX			;POINTER INTO ENV
	OR	DI,DI			;IF ZERO THEN NEED TO FIND PATH=
	JNZ	NEXTP
	MOV	CX,400			;ENV CANNOT BE OVER 400 BYTES LONG
PSRCH:	MOV	AL,ES:[DI]		;LOOK FOR PATH
	CMP	AL,'P'
	JZ	LOOKA
SKIP_TO_0:
	MOV	AL,ES:[DI]		;SKIP FOR A ZERO
	INC	DI
	OR	AL,AL
	JZ	PSRCH
	LOOP	SKIP_TO_0
	JMP	CHAIN_FAIL
LOOKA:	INC	DI
	CMP	BYTE ES:[DI],'A'	;LOOK FOR PATH
	JNZ	SKIP_TO_0
	CMP	BYTE ES:[DI+1],'T'	;LOOK FOR PATH
	JNZ	SKIP_TO_0
	CMP	BYTE ES:[DI+2],'H'	;LOOK FOR PATH
	JNZ	SKIP_TO_0
	CMP	BYTE ES:[DI+3],'='	;LOOK FOR PATH
	JNZ	SKIP_TO_0

	ADD	DI,4			;POINT TO FIRST AFTER PATH=
NEXTP:	CMP	BYTE ES:[DI],0		;ZERO AT END OF PATH LIST
	JZ	CHAIN_FAIL
	MOV	BX,OFFSET FCB		;MOVE PREFIX INTO FCB
MVPRE:	MOV	AL,ES:[DI]		;NEXT PREFIX CHAR
	CMP	AL,0			;END OF PREFIXES ? 
	JZ	TRY_THIS
	INC	DI
	CMP	AL,';'			;PATH SEPERATOR
	JZ	TRY_THIS
	MOV	CS:[BX],AL		;PUT IN PREFIX
	INC	BX
	JMP	MVPRE
TRY_THIS:
	MOV	CX,DI			;REMEMBER PLACE IN PATH LIST
	MOV	DI,BX			;PLACE FOR REST OF NAME
	CMP	BYTE CS:[BX-1],'/'	;SLASH SEPERATOR
	JZ	NO_SLASH		;SEE IF NEEDED OR ALREADY
	CMP	BYTE CS:[BX-1],'\\'
	JZ	NO_SLASH
	MOV	BYTE CS:[BX],'\\'	;ADD IN A SLASH
	INC	DI
NO_SLASH:
	JMP	LOADNEXT		;TRY NEXT PATH

OPEN_OK:
	MOV	HANDLE,AX		;FILE HANDLE
	MOV	AX,CS			;BACK TO TINY CASE
	MOV	DS,AX
	MOV	AX,OFFSET HIWATER	;GET FIRST FREE PARAGRAPH AFTER CHAIN
	ADD	AX,15
	AND	AX,0FFF0H		;SET TO PARAGRAPH
	PUSH	AX			;SAVE FOR READ
	MOV	CL,4
	SHR	AX,CL
	MOV	CX,CS
	ADD	AX,CX			;LOW WATER
	MOV	MINMEM,AX


	POP	DX			;OFFSET OF HIGHWATER
	PUSH	DX
	MOV	BX,HANDLE		;FILE HANDLE
	MOV	CX,65000		;READ UP TO 60000 BYTES
	MOV	AH,READ2_CODE
	INT	IBM			;READ IN THE HEADER RECORD
	JC	CHAIN_FAIL
	PUSH	AX			;SAVE FILE SIZE
;	CLOSE THE EXE FILE

	MOV	BX,HANDLE		;CLOSE THE FILE
	MOV	AH,CLOSE2_CODE
	INT	IBM
	POP	CX			;FILE SIZE


SETUP_HEADER:

	POP	DI			;ADDRESS OF HEADER RECORD

	MOV	ES,OLD_PCB
	MOV	AX,DS:[DI+0EH]		;NEW SS
	MOV	ES:[05CH],AX		;INTO OLD PCB_
	MOV	AX,DS:[DI+10H]		;NEW SP
	MOV	ES:[05EH],AX
	MOV	AX,DS:[DI+14H]		;NEW IP
	MOV	ES:[60H],AX
	MOV	AX,DS:[DI+16H]		;NEW CS
	MOV	ES:[62H],AX

;	MOVE PROGRAM DOWN TO RECLAIM THE 512 BYTES OF HEADER

	MOV	AX,DS
	MOV	ES,AX
	LEA	SI,[DI+512]
	SUB	CX,512
	SHR	CX,1			;MOVE WORDS
	CLD
REP	MOVSW


;	SWITCH STACK

	MOV	AX,OLD_PCB		;BASE OF PCB
	MOV	ES,AX
	MOV	AX,MINMEM		;ADJUST FOR SEGMENT REGISTERS
	MOV	BX,AX
	ADD	BX,ES:[05CH]		;NEW SS
	CLI
	MOV	SS,BX			;NEW STARTING SS
	MOV	SP,ES:[05EH]		;NEW STARTING SP
	STI

	ADD	AX,ES:[62H]		;NEW CS
	PUSH	AX			;PUSH CS:IP FOR DISPATCH
	PUSH	WORD ES:[60H]
	MOV	DS,OLD_PCB		;GET OLD PCB

;	DISPATCH THE JOB

	LRET


CHAIN_FAIL:
	MOV	DS,OLD_DS		;RESTORE DS
	MOV	AX,OFFSET FAILMSG
	PUSH	AX
	CALL	PUTS_
	CALL	EXIT_			;BAIL OUT ON FAILURE

HIWATER:
	END
