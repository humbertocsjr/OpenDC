;
; (c) Copyright 1983, Michael Ouye
;
; IBM PC high speed video interface
;
; This module impelements the editor's video output
; functions directly in the color graphics controller
; buffer memory, page 0. This module assumes an 80 column
; monitor is in use
;
		dseg
cursor_col:	db	0	; y:0..79
cursor_row:	db	0	; x:0..24
position:	dw	0	; pointer into display buffer
;
addr_6845:	dw	3D4H
cr:		equ	0DH
lf:		equ	0AH
bel:		equ	7
bs:		equ	8
tab:		equ	9
home:		equ	11
ff:		equ	12
nul:		equ	0
;/* control key translations */
up_char		equ	30
down_char	equ	31
left_char	equ	29
right_char	equ	28
bol_char	equ	200
eol_char	equ	201
pageup_char	equ	202
pagedown_char	equ	203
bof_char	equ	204
eof_char	equ	205
Ins_char	equ	206
Del_char	equ	207
NextWord_char	equ	208
PrevWord_char	equ	209

M1		equ	210
M2		equ	211
M3		equ	212
M4		equ	213
M5		equ	214
M6		equ	215
M7		equ	216
M8		equ	217
M9		equ	218
M10		equ	219

		dseg
screen_base:	dw	0
convert:
		dw	72, up_char
		dw	80, down_char
		dw	75, left_char
		dw	77, right_char
		dw	71, bol_char
		dw	79, eol_char
		dw	73, pageup_char
		dw	81, pagedown_char
		dw	77H, bof_char
		dw	75H, eof_char
		dw	82, Ins_char
		dw	83, Del_char
		dw	115, PrevWord_char
		dw	116, NextWord_char
		dw	59, M1
		dw	60, M2
		dw	61, M3
		dw	62, M4
		dw	63, M5
		dw	64, M6
		dw	65, M7
		dw	66, M8
		dw	67, M9
		dw	68, M10
		dw	0, 255 ; illegal character

crt_cols	equ	80
		public	scr_cols_, scr_rows_, scr_scrollup_, scr_scrolldown_	
		public	scr_attr_
scr_cols_:	dw	80
scr_rows_:	dw	25
scr_scrollup_:	db	0
scr_scrolldown_:db	0
scr_attr_:	db	07H

ch_in_buf:	dw	2000		; 2000 characters in a buffer (80)
by_in_buf:	dw	4000		; 4000 bytes in a buffer (80)

		cseg
		public	scr_rowcol_, scr_clr_, scr_clrl_, scr_cls_
		public	scr_scup_, scr_scdn_, scr_csts_
		public	scr_co_, scr_setup_, scr_ci_
		public	scr_set_cursor_, scr_mark_

scr_rowcol_:				; move cursor to x,y
		pop	bx
		pop	ax		; row
		pop	dx		; col
		sub	sp,4		; caller cleans stack
		cmp	ax, scr_rows_
		jl	r_ok
		mov	ax, scr_rows_
		dec	ax
r_ok:
		cmp	dx, scr_cols_
		jl	c_ok
		mov	dx, scr_cols_
		dec	dx
c_ok:
		push	bx
		mov	cursor_col,dl	; store new position
		mov	cursor_row,al
		mov	cl,byte scr_cols_	; compute address
		mul	cl
		add	ax,dx
		mov	position,ax
		ret

disable_video:				; turn the screen refresh off
		mov	dx,addr_6845
		add	dx,4
		mov	al,25H
		out	dx,al		; disable video
		ret

enable_video:				; set crt mode
		mov	dx,addr_6845
		add	dx,4
		mov	bx,40H
		mov	es,bx
		mov	al,es:[65H]	; crt_mode_set
		out	dx,al		; restore video
		ret

scr_clr_:					; clear screen
		mov	bx,screen_base
		mov	es,bx
		mov	di,0
		mov	bh,scr_attr_
		mov	bl,20H	; blanks
		mov	cx,2000
		cld
		mov	dx,addr_6845	; 6845 status port
		add	dx,6		; crt status
clr_loop:	in	al,dx
		test	al,8		; vertical retrace
		jz	clr_loop
		call	disable_video
		mov	ax,bx
		rep	stosw
		call	enable_video
		mov	cursor_row,0
		mov	cursor_col,0
		mov	position,0
		ret

scr_clrl_:				; clear rest of line
		mov	cx,scr_cols_
		sub	cl,cursor_col	; subtract the current column
		mov	ch,0
		mov	bx,screen_base
		mov	es,bx
		mov	di,position
		shl	di,1
		cld
		mov	dx,addr_6845		; 6845 status port
		add	dx,6		; CRT status
		mov	bh, scr_attr_
		mov	bl,20H
clrl_loop:
		in	al,dx
		test	al,1
		jnz	clrl_loop
		cli
wait_loop:	in	al,dx		; wait for refresh
		test	al,1		; vertical retrace
		jz	wait_loop
		mov	ax,bx
		stosw
		sti
		loopnz	clrl_loop
		ret			; don't move the cursor

scr_cls_:				; clear rest of screen
		mov	dx,addr_6845	; 6845 status port
		add	dx,6		; CRT status
cls_loop:	in	al,dx
		test	al,8		; vertical retrace
		jz	cls_loop
		call	disable_video
		mov	ax,position
		mov	cx,2000		; # characters in a buffer
		sub	cx,ax
		mov	ax,screen_base
		mov	es,ax
		mov	ah,scr_attr_
		mov	al,20H		; blanks
		mov	di,position
		shl	di,1
		cld
		rep	stosw		; store the reset of the screen
		call	enable_video
		ret			; don't change the cursor


scr_scup_:			; scroll last line, screen from line 2 to 24
		call	disable_video
		mov	di,scr_cols_
		shl	di,1
		mov	si, di
		shl	di,1	; (cols*4) destination, start of buffer, line 2
		add	si,di	; (cols*6) line 3
		push	ds	; save the data segment
		mov	cx,ch_in_buf
		sub	cx, scr_cols_
		sub	cx, scr_cols_	;chars-(crt_cols*2);only the last 23 lines
		cld
		mov	ax, screen_base
		mov	ds,ax
		mov	es,ax
		rep	movsw
		pop	ds		; restore data segment
		mov	ah, scr_attr_
		mov	al,20H
		mov	di,by_in_buf
		sub	di,scr_cols_
		sub	di,scr_cols_	;bytes-(crt_cols*2); line 24
		mov	cx,scr_cols_
		rep	stosw	; blank out the last line
		call	enable_video
;		mov	cursor_row,24
;		mov	cursor_col,0
;		mov	ax, ch_in_buf
;		sub	ax, scr_cols_	; chars-cols
;		mov	position,ax	; line 24
		ret

scr_scdn_:				; scroll first line
		call	disable_video
		mov	di,by_in_buf
		sub	di,2			; (last word) line 24
		mov	si,di
		sub	si, scr_cols_
		sub	si, scr_cols_		;bytes-(crt_cols*2) line 23
		push	ds
		std			; reverse direction
		mov	cx,ch_in_buf
		sub	cx, scr_cols_
		sub	cx, scr_cols_	; chars-(crt_cols*2)
		mov	ax,screen_base
		mov	ds,ax
		mov	es,ax
		rep	movsw
		pop	ds
		mov	di,scr_cols_
		shl	di,1
		shl	di,1		; line 2
		mov	ah,scr_attr_
		mov	al,20H	; blanks
		cld
		mov	cx,scr_cols_
		rep	stosw		; blank out first line
		call	enable_video
;		mov	cursor_row,2	; line 2
;		mov	cursor_col,0
;		mov	ax, scr_cols_
;		shl	ax, 1
;		mov	position,ax	; line 2 buffer offset
		ret

scr_setup_:		; initialize the base pointer for the screen 
		push	bp
		mov	ax,40H
		mov	es,ax
		mov	ax,0B800H
		mov	dx,3D4H
		mov	bl,es:[10h]	; test which card in use
		and	bl,30H
		cmp	bl,30H
		jne	skip_over
		mov	ax,0B000H
		mov	dx,3B4H
skip_over:	mov	screen_base,ax
		mov	addr_6845,dx
		mov	ax, 40H		; BIOS data segment
		mov	es,ax
		cmp	es: byte [4AH], 40
		jne	skip_again
		mov	scr_cols_,40
		mov	ch_in_buf, 1000
		mov	by_in_buf, 2000
skip_again:
		pop	bp
		ret

scr_ci_:					;return the next character
					; translate if necessary
		push	bp
		mov	ah,0
		int	16H
		cmp	al,0
		jne	not_special
		mov	bx, offset convert	; convert special key
ci_loop:
		cmp	byte[bx],0
		jz	got_it
		cmp	ah, byte[bx]
		je	got_it
		inc	bx
		inc	bx
		inc	bx
		inc	bx
		jmp	ci_loop
got_it:		inc	bx
		inc	bx
		mov	ax,word[bx]
		pop	bp
		ret
not_special:	mov	ah,0
		pop	bp
		ret

scr_csts_:				;return non-zero if character avail
		push	bp
		mov	ah,1
		int	16H
		jnz	interp
		mov	ax,0
		pop	bp
		ret
interp:
		cmp	al,0
		jne	cs_not_special
		mov	bx, offset convert	; convert special key
csts_loop:
		cmp	byte[bx],0
		jz	cs_got_it
		cmp	ah, byte[bx]
		je	cs_got_it
		inc	bx
		inc	bx
		inc	bx
		inc	bx
		jmp	csts_loop
cs_got_it:	inc	bx
		inc	bx
		mov	ax,word[bx]
		pop	bp
		ret
cs_not_special:	mov	ah,0
		pop	bp
		ret

scr_set_cursor_:				; set the visible cursor to the
					; current position
		push	bp
		mov	ah,2
		mov	dh, cursor_row
		mov	dl, cursor_col
		mov	bh,0
		int	10H
		pop	bp
		ret

scr_attr_co_:				; output character and attribute
					;  at the cursor position.  If the
					;  character is 0, then the attribute
					;  is applied to the existing character
					; parameter is the combined attr (high byte)
					; and character (low).  Attributes
					; conform to the IBM-PC screen attributes

		pop	bx
		pop	ax
		push	ax
		push	bx		; caller cleans stack
					; put the char in the buffer
		mov	cx,ax
		mov	bx,screen_base
		mov	es,bx
		mov	di,position
		shl	di,1
		or	cl,cl
		jnz	oc_over
		mov	cl,es:[di]
oc_over:
		mov	dx,addr_6845	; 6845 status port
		add	dx,6
oc_loop2:	in	al,dx
		test	al,1
		jnz	oc_loop2
		cli
oc_loop1:	in	al,dx		; wait for it to drop
		test	al,1
		jz	oc_loop1
		mov	es:[di],cx
		sti			; reenable interrupts
		ret


scr_co_:					; standard screen output routine
		pop	bx
		pop	ax
		push	ax
		push	bx
		mov	ah,scr_attr_ 		; standard video attribute
		push	ax
		call	scr_attr_co_
		pop	bx
		mov	al, cursor_col
		inc	al		; since we start at column 0 to scr_cols_ - 1
		cmp	al, byte scr_cols_
		jge	no_right
		inc	cursor_col
		inc	position
no_right:
		ret

scr_mark_:					; mark the passed char,
						; cursor does not advance
		pop	bx
		pop	ax
		push	ax
		push	bx
		cmp	al, 20H			; check for printable > 20H
		jge	m_over
		mov	al, 20H
m_over:
		mov	ah, 70H			; reverse video attribute
		push	ax
		call	scr_attr_co_
		pop	bx
		ret
